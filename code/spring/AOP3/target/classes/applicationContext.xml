<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">


    <bean class="yulin.service.UserServiceImpl" id="service"/>


    <!--    方法1：-->
<!--
1、编写切面类实现不同的接口，如MethodBeforeAdvice / AfterReturningAdvice
2、注册为bean，进入aop配置
3、使用execution来定义pointcut，即指明作用在哪些业务方法上
4、使用advice-ref和pointcut-ref将切面方法和业务方法连接起来即可
-->
<!--    <bean class="yulin.log.AfterLog" id="afterLog"/>-->
<!--    <bean class="yulin.log.Beforelog" id="beforelog"/>-->
<!--    <aop:config>-->
<!--        <aop:pointcut id="pointcut" expression="execution(* yulin.service.UserServiceImpl.*(..))"/>-->
<!--        <aop:advisor advice-ref="beforelog" pointcut-ref="pointcut"/>-->
<!--        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>-->
<!--    </aop:config>-->




    <!--    方法2：-->
<!--
1、首先将切面类注册为bean，然后进入aop配置：
2、利用刚才注册的bean来定义一个切面aspect，
3、在该切面中，定义一个pointcut，即使用execution来指定切面作用在哪些业务方法上，
4、然后具体说明哪些切面方法生效，并指定生效位置
-->
    <bean id="log2" class="yulin.log.Log2"/>
    <aop:config>
        <aop:aspect ref="log2" id="pointcut2">
            <aop:pointcut id="pointcut2" expression="execution(* yulin.service.UserServiceImpl.*(..))"/>

            <aop:before method="before" pointcut-ref="pointcut2"/>
            <aop:around method="strange" pointcut-ref="pointcut2"/>
            <aop:after method="after" pointcut-ref="pointcut2"/>
        </aop:aspect>
    </aop:config>


    <!--    方法3：-->
<!--
1、首先将切面类注册为bean
2、开启aop自动代理
-->
<!--    <bean class="yulin.log.Log3Annotation" id="annotation"/>-->
<!--    <aop:aspectj-autoproxy/>-->

</beans>
